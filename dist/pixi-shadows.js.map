{"version":3,"file":"pixi-shadows.js","sources":["../src/filters/FilterFuncs.ts","../src/filters/ShadowMapFilter.ts","../src/filters/ShadowMaskFilter.ts","../src/Shadow.ts","../src/filters/ShadowFilter.ts","../src/mixins/Application.ts","../src/mixins/Container.ts","../src/index.ts"],"sourcesContent":["// Some functions to map a value as a color\r\nexport const filterFuncs = /*glsl*/ `\r\nfloat colorToFloat(vec4 color){\r\n    return (color.r + (color.g + color.b * 256.0) * 256.0) * 255.0 - 8388608.0;\r\n}\r\nvec4 floatToColor(float f){\r\n    f += 8388608.0;\r\n    vec4 color;\r\n    color.a = 255.0;\r\n    color.b = floor(f / 256.0 / 256.0);\r\n    color.g = floor((f - color.b * 256.0 * 256.0) / 256.0);\r\n    color.r = floor(f - color.b * 256.0 * 256.0 - color.g * 256.0);\r\n    return color / 255.0;\r\n}\r\n`;\r\n","import { Filter, FilterSystem, RenderTexture } from '@pixi/core';\r\n\r\nimport { CLEAR_MODES } from '@pixi/constants';\r\nimport { Matrix } from '@pixi/math';\r\nimport { Shadow } from '../Shadow';\r\nimport { filterFuncs } from './FilterFuncs';\r\n\r\nconst maxDepthResolution = '2000.0';\r\n\r\nexport class ShadowMapFilter extends Filter {\r\n    autoFit = false;\r\n    padding = 0;\r\n    ignoreShadowCasterMatrix = new Matrix();\r\n\r\n    constructor(private shadow: Shadow) {\r\n        super(\r\n            /* glsl*/ `\r\n            attribute vec2 aVertexPosition;\r\n            attribute vec2 aTextureCoord;\r\n            \r\n            uniform mat3 projectionMatrix;\r\n            uniform mat3 filterMatrix;\r\n            \r\n            varying vec2 vTextureCoord;\r\n            varying vec2 vFilterCoord;\r\n            \r\n            void main(void){\r\n                gl_Position = vec4((projectionMatrix * vec3(aVertexPosition, 1.0)).xy, 0.0, 1.0);\r\n                vTextureCoord = aTextureCoord;\r\n            }\r\n        `,\r\n            /* glsl*/ `\r\n            varying vec2 vMaskCoord;\r\n            varying vec2 vTextureCoord;\r\n            uniform vec4 filterArea;\r\n            \r\n            uniform sampler2D shadowCasterSampler;\r\n            uniform vec2 shadowCasterSpriteDimensions;\r\n\r\n            uniform bool hasIgnoreShadowCaster;\r\n            uniform sampler2D ignoreShadowCasterSampler;\r\n            uniform mat3 ignoreShadowCasterMatrix;\r\n            uniform vec2 ignoreShadowCasterDimensions;\r\n\r\n            uniform float lightRange;\r\n            uniform float lightScatterRange;\r\n            uniform vec2 lightLoc;\r\n\r\n            uniform float depthResolution;\r\n            uniform bool darkenOverlay;\r\n\r\n            uniform vec2 dimensions;\r\n\r\n            ${filterFuncs}\r\n            \r\n            void main(void){\r\n                float pi = 3.141592653589793238462643;\r\n                \r\n                // Cap the depthResolution (as I expect performance loss by having a big value, but I am not sure)\r\n                float depthRes = min(${maxDepthResolution}, depthResolution);\r\n\r\n                // The current coordinate on the texutre measured in pixels, as well as a fraction\r\n                vec2 pixelCoord = vTextureCoord * filterArea.xy;\r\n                vec2 normalizedCoord = pixelCoord / dimensions;\r\n                \r\n                // Extract the components of the normalized coordinate\r\n                float x = normalizedCoord.x;\r\n                float y = normalizedCoord.y;\r\n\r\n                // Calculate the offset of the lightPoint we are currently at\r\n                float offsetAngle = 2.0 * pi * y;\r\n                vec2 offset = vec2(cos(offsetAngle), sin(offsetAngle)) * lightScatterRange;\r\n\r\n                // Calculate the angle at which we are ray tracing\r\n                float angle = x * pi * 2.0;\r\n\r\n                // The distance at which we hit an object\r\n                float hitDistancePer = 1.0;\r\n\r\n                // Increase the distance until we hit an object or reach the maximum value\r\n                bool reached = false;\r\n                for(float dist=0.0; dist < ${maxDepthResolution}; dist+=1.0){\r\n                    if(dist > depthRes) break;\r\n                    \r\n                    // Calculate the actual distance in pixel units, and use it to calculate the pixel coordinate to inspect\r\n                    float distance = dist / depthRes * lightRange;\r\n                    vec2 coord = lightLoc + offset + vec2(cos(angle), sin(angle)) * distance;\r\n                \r\n                    // Extract the pixel and check if it is opaque\r\n                    float opacity = texture2D(shadowCasterSampler, coord / shadowCasterSpriteDimensions).a;\r\n                    if((opacity > 0.0 && darkenOverlay) || opacity > 0.5){\r\n                        // Check if it isn't hitting something that should be ignore\r\n                        if(hasIgnoreShadowCaster){ \r\n                            vec2 l = (ignoreShadowCasterMatrix * vec3(coord, 1.0)).xy / ignoreShadowCasterDimensions;\r\n                            if(l.x >= -0.01 && l.x <= 1.01 && l.y >= -0.01 && l.y <= 1.01){\r\n                                // If the pixel at the ignoreShadowCaster is opaque here, skip this pixel\r\n                                if(opacity > 0.0){\r\n                                    continue;\r\n                                }\r\n                            }\r\n                        }\r\n\r\n                        // Calculate the percentage at which this hit occurred, and stop the loop\r\n                        if(!darkenOverlay){\r\n                            hitDistancePer = distance / lightRange;\r\n                            break;\r\n                        }\r\n                        reached = true;\r\n                    }else if(reached){\r\n                        hitDistancePer = (distance - 1.0) / lightRange;\r\n                        break;\r\n                    }\r\n                }\r\n\r\n                // Express the distance as a color in the map\r\n                gl_FragColor = floatToColor(hitDistancePer * 100000.0);\r\n            }\r\n        `\r\n        );\r\n        this.uniforms.lightPointCount = shadow.pointCount;\r\n        this.uniforms.dimensions = [shadow.radialResolution, shadow.pointCount];\r\n    }\r\n\r\n    apply(filterManager: FilterSystem, input: RenderTexture, output: RenderTexture, clearMode?: CLEAR_MODES) {\r\n        // Decide whether or not to darken the overlays\r\n        this.uniforms.darkenOverlay = this.shadow.darkenOverlay;\r\n\r\n        // Attach the object sampler\r\n        const sc = this.shadow._shadowCasterSprite;\r\n\r\n        this.uniforms.shadowCasterSpriteDimensions = [sc.width, sc.height];\r\n        this.uniforms.shadowCasterSampler = sc._texture;\r\n\r\n        // Use the world transform (data about the absolute location on the screen) to determine the lights relation to the objectSampler\r\n        const wt = this.shadow.worldTransform;\r\n        const scale = Math.sqrt(wt.a * wt.a + wt.b * wt.b);\r\n        const range = this.shadow.range * scale;\r\n\r\n        this.uniforms.lightRange = range;\r\n        this.uniforms.lightScatterRange = this.shadow.scatterRange;\r\n        this.uniforms.lightLoc = [wt.tx, wt.ty];\r\n        this.uniforms.depthResolution = range * this.shadow.depthResolution;\r\n\r\n        // Check if there is an object that the filter should attempt to ignore\r\n        const isc = this.shadow.ignoreShadowCaster;\r\n\r\n        this.uniforms.hasIgnoreShadowCaster = !!isc;\r\n        if (isc) {\r\n            // Calculate the tranform matrix in order to access the proper pixel of the ignoreObject\r\n            isc.worldTransform.copyFrom(this.ignoreShadowCasterMatrix);\r\n            this.uniforms.ignoreShadowCasterMatrix = this.ignoreShadowCasterMatrix.invert();\r\n\r\n            // Attach the ignore object\r\n            this.uniforms.ignoreShadowCasterDimensions = [isc.width, isc.height];\r\n            this.uniforms.ignoreShadowCasterSampler = isc._texture;\r\n        }\r\n\r\n        // Apply the filter\r\n        filterManager.applyFilter(this, input, output, clearMode);\r\n    }\r\n}\r\n","import { Filter, FilterSystem, RenderTexture } from '@pixi/core';\r\n\r\nimport { CLEAR_MODES } from '@pixi/constants';\r\nimport { Matrix } from '@pixi/math';\r\nimport { Shadow } from '../Shadow';\r\nimport { filterFuncs } from './FilterFuncs';\r\n\r\nexport class ShadowMaskFilter extends Filter {\r\n    private inverted = false;\r\n\r\n    autoFit = false;\r\n    padding = 0;\r\n    overlayMatrix = new Matrix();\r\n\r\n    constructor(private shadow: Shadow) {\r\n        super(\r\n            /* glsl*/ `\r\n            attribute vec2 aVertexPosition;\r\n            attribute vec2 aTextureCoord;\r\n            \r\n            uniform mat3 projectionMatrix;\r\n            uniform mat3 overlayMatrix;\r\n            uniform mat3 filterMatrix;\r\n            \r\n            varying vec2 vTextureCoord;\r\n            varying vec2 vOverlayCoord;\r\n            varying vec2 vFilterCoord;\r\n            \r\n            void main(void){\r\n                gl_Position = vec4((projectionMatrix * vec3(aVertexPosition, 1.0)).xy, 0.0, 1.0);\r\n                vTextureCoord = aTextureCoord;\r\n                vOverlayCoord = (overlayMatrix * vec3(aTextureCoord, 1.0) ).xy;\r\n            }\r\n        `,\r\n            /* glsl*/ `\r\n            varying vec2 vOverlayCoord;\r\n            varying vec2 vTextureCoord;\r\n            uniform vec4 filterArea;\r\n            \r\n            uniform sampler2D shadowOverlaySampler;\r\n\r\n            uniform vec2 dimensions;\r\n\r\n            uniform sampler2D shadowSampler;\r\n\r\n            uniform bool darkenOverlay;\r\n            uniform bool inverted;\r\n\r\n            uniform float overlayLightLength;\r\n\r\n            uniform float lightPointCount;\r\n            uniform float lightRange;\r\n            uniform float lightScatterRange;\r\n            uniform float lightIntensity;\r\n\r\n            ${filterFuncs}\r\n            \r\n            void main(void){\r\n                float pi = 3.141592653589793238462643;\r\n                \r\n                // The current coordinate on the texture measured in pixels\r\n                vec2 pixelCoord = vTextureCoord * filterArea.xy;\r\n\r\n                // The distance delta relative to the center\r\n                vec2 lightDelta = pixelCoord - dimensions / 2.0;\r\n                float distance = sqrt(lightDelta.x * lightDelta.x + lightDelta.y * lightDelta.y);\r\n                if (distance > lightRange) return;\r\n\r\n                // The final intensity of the light at this pixel\r\n                float totalIntensity = 0.0;\r\n\r\n                // The intensity of the pixel in the overlay map at this pixel\r\n                vec4 overlayPixel = texture2D(shadowOverlaySampler, vOverlayCoord);\r\n\r\n                // Go through all light points (at most 1000) to add them to the intensity\r\n                for(float lightIndex=0.0; lightIndex<1000.0; lightIndex++){\r\n                    if (lightIndex >= lightPointCount) break; // Stop the loop if we went over the pointCount\r\n\r\n                    // Calculate the offset of this lightPoint, relative the the center of the light\r\n                    float lightIndexFrac = (lightIndex + 0.5) / lightPointCount;\r\n                    float offsetAngle = 2.0 * pi * lightIndexFrac;\r\n                    vec2 offset = vec2(cos(offsetAngle), sin(offsetAngle)) * lightScatterRange;\r\n\r\n                    // Calculate the location of this pixel relative to the lightPoint, and check the depth map\r\n                    vec2 pointDelta = lightDelta - offset;\r\n                    float pointDistance = sqrt(pointDelta.x * pointDelta.x + pointDelta.y * pointDelta.y);\r\n                    float angle = mod(atan(pointDelta.y, pointDelta.x) + 2.0 * pi, 2.0 * pi);\r\n                    vec4 depthPixel = texture2D(shadowSampler, vec2(angle / (2.0 * pi), lightIndexFrac));\r\n\r\n                    // Extract the object distance from the depth map pixel\r\n                    float objectDistance = colorToFloat(depthPixel) / 100000.0 * lightRange;\r\n                    \r\n                    // Calculate the intensity of this pixel based on the overlaySampler and objectDistance\r\n                    float intensity = 0.0;\r\n                    if(darkenOverlay){\r\n                        if(objectDistance > pointDistance || objectDistance >= lightRange){\r\n                            intensity = 1.0 - distance / lightRange;\r\n                        }else if(overlayPixel.a > 0.5){\r\n                            intensity = 1.0 - distance / lightRange;\r\n                            intensity *= pow(1.0 - (distance - objectDistance) / (lightRange - objectDistance), 2.5) * overlayPixel.a;\r\n                        }\r\n                    }else{\r\n                        if(inverted){\r\n                            if(overlayPixel.a > 0.5){\r\n                                intensity = 1.0-overlayPixel.a;\r\n                            }else if (objectDistance > pointDistance || objectDistance >= lightRange) {\r\n                                intensity = 0.0;\r\n                            }else{\r\n                                intensity = 1.0;\r\n                            }\r\n                        }else{\r\n                            if (objectDistance > pointDistance || objectDistance >= lightRange) {\r\n                                intensity = 1.0 - distance / lightRange;\r\n                            }else if (overlayPixel.a > 0.5) {\r\n                                intensity = (1.0 - distance / lightRange) * (1.0 - (pointDistance - objectDistance) / overlayLightLength);\r\n                            }\r\n                        }\r\n                    }\r\n                    \r\n\r\n                    // Add the intensity to the total intensity\r\n                    totalIntensity += intensity / lightPointCount;\r\n                }\r\n\r\n                // Create a mask based on the intensity\r\n                gl_FragColor = vec4(vec3(lightIntensity * totalIntensity), 1.0);\r\n            }\r\n        `\r\n        );\r\n\r\n        this.uniforms.shadowSampler = shadow._shadowMapResultTexture;\r\n        this.uniforms.lightPointCount = shadow.pointCount;\r\n    }\r\n\r\n    apply(filterManager: FilterSystem, input: RenderTexture, output: RenderTexture, clearMode?: CLEAR_MODES) {\r\n        // Decide whether or not to darken the overlays\r\n        this.uniforms.darkenOverlay = this.shadow.darkenOverlay;\r\n\r\n        // Attach the object sampler\r\n        const sc = this.shadow._shadowOverlaySprite;\r\n\r\n        this.uniforms.shadowOverlaySpriteDimensions = [sc.width, sc.height];\r\n        this.uniforms.shadowOverlaySampler = sc._texture;\r\n\r\n        // Use the world transform (data about the absolute location on the screen) to determine the lights relation to the objectSampler\r\n        const wt = this.shadow.worldTransform;\r\n        const scale = Math.sqrt(wt.a * wt.a + wt.b * wt.b);\r\n        const range = this.shadow.range * scale;\r\n\r\n        this.uniforms.lightRange = range;\r\n        this.uniforms.lightScatterRange = this.shadow.scatterRange;\r\n        this.uniforms.lightIntensity = this.shadow.intensity;\r\n\r\n        // The length of the area of the overlay to be lit\r\n        this.uniforms.overlayLightLength = this.shadow.overlayLightLength;\r\n\r\n        // Invert the filter if specified\r\n        this.uniforms.inverted = this.inverted;\r\n\r\n        // Texture size increase in order to fit the sprite rectangle (even though we are only interested in a circle)\r\n        // So we have to consider this in the texture size\r\n        const texSize = 2 * this.shadow.range * (wt.a + wt.b);\r\n\r\n        this.uniforms.dimensions = [texSize, texSize];\r\n\r\n        // Calculate the object sampler position in relation to the light\r\n        this.uniforms.overlayMatrix = filterManager.calculateSpriteMatrix(this.overlayMatrix, sc);\r\n\r\n        // Apply the filter\r\n        filterManager.applyFilter(this, input, output, clearMode);\r\n    }\r\n}\r\n","import { BLEND_MODES, SCALE_MODES } from '@pixi/constants';\r\n\r\nimport { Application } from '@pixi/app';\r\nimport { RenderTexture } from '@pixi/core';\r\nimport { ShadowMapFilter } from './filters/ShadowMapFilter';\r\nimport { ShadowMaskFilter } from './filters/ShadowMaskFilter';\r\nimport { Sprite } from '@pixi/sprite';\r\n\r\n/**\r\n * @class\r\n * @memberof PIXI.shadows\r\n *\r\n * @param range {number} The radius of the lit area in pixels.\r\n * @param [intensity=1] {number} The opacity of the lit area.\r\n * @param [pointCount=20] {number} The number of points that makes up this light.\r\n * @param [scatterRange=15] {number} The radius at which the points of the light should be scattered.\r\n */\r\n\r\nexport class Shadow extends Sprite {\r\n    /**\r\n     * The of steps to take per pixel. (Higher resolution = more precise edges + more intensive).\r\n     */\r\n    depthResolution = 1; // per screen pixel\r\n    /**\r\n     * Whther or not overlays in shadows should become darker (can create odd artifacts, is very experimental/unfinished)\r\n     */\r\n    darkenOverlay = false;\r\n\r\n    /**\r\n     * How many pixels of the overlay should be lit up by the light\r\n     */\r\n    overlayLightLength = Infinity;\r\n\r\n    /**\r\n     * A shadow caster to ignore while creating the shadows. (Can be used if sprite and light always overlap).\r\n     */\r\n    ignoreShadowCaster: Sprite | undefined;\r\n\r\n    shadowFilter: ShadowMaskFilter;\r\n    renderStep: boolean | undefined;\r\n    shadowMapResultSprite: Sprite | undefined;\r\n\r\n    _shadowCasterSprite: Sprite | undefined;\r\n    _shadowOverlaySprite: Sprite | undefined;\r\n    _shadowMapResultTexture: RenderTexture | undefined;\r\n\r\n    private _shadowMapSprite: Sprite | undefined;\r\n\r\n    /**\r\n     * @param range The radius of the lit area in pixels.\r\n     * @param intensity The opacity of the lit area.\r\n     * @param pointCount The number of points that makes up this light.\r\n     * @param scatterRange The radius at which the points of the light should be scattered.\r\n     */\r\n    constructor(\r\n        private _range: number,\r\n        /**\r\n         * The opacity of the lit area. (may exceed 1).\r\n         */\r\n        public intensity: number = 1,\r\n        private _pointCount: number = 20,\r\n        /**\r\n         * The radius at which the points of the light should be scattered. (Greater range = softer shadow boundary).\r\n         */\r\n        public scatterRange: number = _pointCount === 1 ? 0 : 15,\r\n        private _radialResolution = 800\r\n    ) {\r\n        super(\r\n            RenderTexture.create({\r\n                width: _range * 2,\r\n                height: _range * 2,\r\n            })\r\n        );\r\n\r\n        this.anchor.set(0.5);\r\n\r\n        this.__createShadowMapSources();\r\n    }\r\n    // Create the texture to apply this mask filter to\r\n    __updateTextureSize() {\r\n        this.texture.destroy();\r\n        this.texture = RenderTexture.create({\r\n            width: this._range * 2,\r\n            height: this._range * 2,\r\n        });\r\n    }\r\n    // Create the resources that create the shadow map\r\n    __createShadowMapSources() {\r\n        if (this._shadowMapSprite) this._shadowMapSprite.destroy();\r\n        if (this.shadowMapResultSprite) this.shadowMapResultSprite.destroy();\r\n        if (this._shadowMapResultTexture) this._shadowMapResultTexture.destroy();\r\n\r\n        // A blank texture/sprite to apply the filter to\r\n        this._shadowMapResultTexture = RenderTexture.create({\r\n            width: this._radialResolution,\r\n            height: this._pointCount,\r\n        });\r\n        this._shadowMapResultTexture.baseTexture.scaleMode = SCALE_MODES.NEAREST;\r\n        this._shadowMapSprite = new Sprite(this._shadowMapResultTexture);\r\n        this._shadowMapSprite.filters = [new ShadowMapFilter(this)];\r\n\r\n        // The resulting texture/sprite after the filter has been applied\r\n        this.shadowMapResultSprite = new Sprite(this._shadowMapResultTexture);\r\n\r\n        // Create the mask filter\r\n        const filter = new ShadowMaskFilter(this);\r\n\r\n        filter.blendMode = BLEND_MODES.ADD;\r\n        this.shadowFilter = filter;\r\n        this.filters = [filter];\r\n    }\r\n    // Properly dispose all the created resources\r\n    destroy() {\r\n        if (this._shadowMapSprite) this._shadowMapSprite.destroy();\r\n        if (this.shadowMapResultSprite) this.shadowMapResultSprite.destroy();\r\n        if (this._shadowMapResultTexture) this._shadowMapResultTexture.destroy();\r\n        this.texture.destroy();\r\n\r\n        return super.destroy();\r\n    }\r\n    // Don't render this sprite unless we are in the dedicated render step called by the shadow filter\r\n    renderAdvanced(renderer: any) {\r\n        if (this.renderStep) super.renderAdvanced(renderer);\r\n    }\r\n\r\n    // Update the map to create the mask from\r\n    update(renderer: Application['renderer'], shadowCasterSprite: Sprite, shadowOverlaySprite: Sprite) {\r\n        this._shadowCasterSprite = shadowCasterSprite;\r\n        this._shadowOverlaySprite = shadowOverlaySprite;\r\n        renderer.render(this._shadowMapSprite, {\r\n            renderTexture: this._shadowMapResultTexture,\r\n            clear: true,\r\n            skipUpdateTransform: true,\r\n        });\r\n    }\r\n\r\n    // Attribute getters + setters\r\n\r\n    /**\r\n     * @type {number} The radius of the lit area in pixels.\r\n     */\r\n    set range(range) {\r\n        this._range = range;\r\n        this.__updateTextureSize();\r\n    }\r\n    get range() {\r\n        return this._range;\r\n    }\r\n\r\n    /**\r\n     * @type {number} The number of points that makes up this light, for soft shadows. (More points = softer shadow edges + more intensive).\r\n     */\r\n    set pointCount(count) {\r\n        this._pointCount = count;\r\n        this.__createShadowMapSources();\r\n    }\r\n    get pointCount() {\r\n        return this._pointCount;\r\n    }\r\n\r\n    /**\r\n     * @type {number} The number of rays to draw for the light. (Higher resolution = more precise edges + more intensive).\r\n     */\r\n    set radialResolution(resolution) {\r\n        this._radialResolution = resolution;\r\n        this.__createShadowMapSources();\r\n    }\r\n    get radialResolution() {\r\n        return this._radialResolution;\r\n    }\r\n}\r\n","import { CLEAR_MODES, SCALE_MODES } from '@pixi/constants';\r\nimport { Filter, FilterSystem, RenderTexture } from '@pixi/core';\r\n\r\nimport { Application } from '@pixi/app';\r\nimport { Container } from '@pixi/display';\r\nimport { Matrix } from '@pixi/math';\r\nimport { Shadow } from '../Shadow';\r\nimport { Sprite } from '@pixi/sprite';\r\n\r\nexport class ShadowFilter extends Filter {\r\n    public tick = 0;\r\n    private _useShadowCastersAsOverlay = true;\r\n    _shadowOverlayResultTexture: RenderTexture | undefined;\r\n    _shadowOverlayResultSprite: Sprite | undefined;\r\n    _shadowOverlayContainer: Container | undefined;\r\n    _shadowCasterResultTexture: RenderTexture | undefined;\r\n    _shadowCasterResultSprite: Sprite | undefined;\r\n    _shadowCasterContainer: Container | undefined;\r\n    _maskResultTexture: RenderTexture | undefined;\r\n    _maskResultSprite: Sprite | undefined;\r\n    _maskContainer: Container | undefined;\r\n    _maskMatrix: Matrix | undefined;\r\n    constructor(private _width: number, private _height: number) {\r\n        super(\r\n            /* glsl*/ `\r\n            attribute vec2 aVertexPosition;\r\n            attribute vec2 aTextureCoord;\r\n            \r\n            uniform mat3 projectionMatrix;\r\n            uniform mat3 otherMatrix;\r\n            \r\n            varying vec2 vMaskCoord;\r\n            varying vec2 vTextureCoord;\r\n            \r\n            void main(void)\r\n            {\r\n                gl_Position = vec4((projectionMatrix * vec3(aVertexPosition, 1.0)).xy, 0.0, 1.0);\r\n            \r\n                vTextureCoord = aTextureCoord;\r\n                vMaskCoord = ( otherMatrix * vec3( aTextureCoord, 1.0)  ).xy;\r\n            }\r\n        `,\r\n            /* glsl*/ `                    \r\n            varying vec2 vMaskCoord;\r\n            varying vec2 vTextureCoord;\r\n            \r\n            uniform sampler2D uSampler;\r\n            uniform sampler2D mask;\r\n            uniform vec4 maskClamp;\r\n            uniform float ambientLight;\r\n            \r\n            void main(void){            \r\n                vec4 original = texture2D(uSampler, vTextureCoord);\r\n                vec4 masky = texture2D(mask, vMaskCoord);\r\n            \r\n                original *= ambientLight + (1.0 - ambientLight) * (masky.r + masky.g + masky.b) / 3.0;\r\n            \r\n                gl_FragColor = original;\r\n            }\r\n        `\r\n        );\r\n\r\n        this.uniforms.ambientLight = 0.0;\r\n        this.uniforms.size = [this._width, this._height];\r\n\r\n        this.__createCasterSources();\r\n        this.__createOverlaySources();\r\n        this.__createMaskSources();\r\n    }\r\n    // Shadow overlay objects\r\n    __createOverlaySources() {\r\n        if (this._shadowOverlayResultTexture) this._shadowOverlayResultTexture.destroy();\r\n        if (this._shadowOverlayResultSprite) this._shadowOverlayResultSprite.destroy();\r\n\r\n        if (!this._shadowOverlayContainer) this._shadowOverlayContainer = new Container();\r\n\r\n        // Create the final mask to apply to the container that this filter is applied to\r\n        this._shadowOverlayResultTexture = RenderTexture.create({ width: this._width, height: this._height });\r\n        this._shadowOverlayResultTexture.baseTexture.scaleMode = SCALE_MODES.NEAREST;\r\n        this._shadowOverlayResultSprite = new Sprite(this._shadowOverlayResultTexture);\r\n    }\r\n    // Shadow caster objects\r\n    __createCasterSources() {\r\n        if (this._shadowCasterResultTexture) this._shadowCasterResultTexture.destroy();\r\n        if (this._shadowCasterResultSprite) this._shadowCasterResultSprite.destroy();\r\n\r\n        if (!this._shadowCasterContainer) this._shadowCasterContainer = new Container();\r\n\r\n        // Create the final mask to apply to the container that this filter is applied to\r\n        this._shadowCasterResultTexture = RenderTexture.create({ width: this._width, height: this._height });\r\n        this._shadowCasterResultTexture.baseTexture.scaleMode = SCALE_MODES.NEAREST;\r\n        this._shadowCasterResultSprite = new Sprite(this._shadowCasterResultTexture);\r\n    }\r\n    // Final mask to apply as a filter\r\n    __createMaskSources() {\r\n        if (this._maskResultTexture) this._maskResultTexture.destroy();\r\n        if (this._maskResultSprite) this._maskResultSprite.destroy();\r\n\r\n        // Create maskMatrix for shader transform data\r\n        if (!this._maskMatrix) this._maskMatrix = new Matrix();\r\n\r\n        // Create the final mask to apply to the container that this filter is applied to\r\n        this._maskResultTexture = RenderTexture.create({ width: this._width, height: this._height });\r\n        this._maskResultTexture.baseTexture.scaleMode = SCALE_MODES.NEAREST;\r\n        if (!this._maskContainer) this._maskContainer = new Container();\r\n        this._maskResultSprite = new Sprite(this._maskResultTexture);\r\n    }\r\n    // Update the mask texture (called from the Application mixin)\r\n    update(renderer: Application['renderer']) {\r\n        // Shadows and objects will automatically be added to containers because of the Container mixin\r\n\r\n        this.tick++; // Increase the tick so that shadows and objects know they can add themselves to the container again in their next update\r\n\r\n        /* render shadow casters */\r\n        // Remove the parent layer from the objects in order to properly render it to the container\r\n        this._shadowCasterContainer.children.forEach((child) => {\r\n            child._activeParentLayer = null;\r\n        });\r\n\r\n        // Render all the objects onto 1 texture\r\n        renderer.render(this._shadowCasterContainer, {\r\n            renderTexture: this._shadowCasterResultTexture,\r\n            clear: true,\r\n            skipUpdateTransform: true,\r\n        });\r\n\r\n        // Remove all the objects from the container\r\n        this._shadowCasterContainer.children.length = 0;\r\n\r\n        /* render shadow overlays */\r\n        if (!this._useShadowCastersAsOverlay) {\r\n            this._shadowOverlayContainer.children.forEach((child) => {\r\n                child._activeParentLayer = null;\r\n            });\r\n\r\n            // Render all the objects onto 1 texture\r\n            renderer.render(this._shadowOverlayContainer, {\r\n                renderTexture: this._shadowOverlayResultTexture,\r\n                clear: true,\r\n                skipUpdateTransform: true,\r\n            });\r\n\r\n            // Remove all the objects from the container\r\n            this._shadowOverlayContainer.children.length = 0;\r\n        }\r\n\r\n        /* render shadows */\r\n\r\n        // Update all shadows and indicate that they may properly be rendered now\r\n        const overlay = this._useShadowCastersAsOverlay\r\n            ? this._shadowCasterResultSprite\r\n            : this._shadowOverlayResultSprite;\r\n\r\n        this._maskContainer.children.forEach((shadow) => {\r\n            if (shadow instanceof Shadow) {\r\n                shadow.renderStep = true;\r\n                shadow.update(renderer, this._shadowCasterResultSprite, overlay);\r\n            }\r\n        });\r\n\r\n        // Render all the final shadow masks onto 1 texture\r\n        renderer.render(this._maskContainer, {\r\n            renderTexture: this._maskResultTexture,\r\n            clear: true,\r\n            skipUpdateTransform: true,\r\n        });\r\n\r\n        // Indicate that the shadows may no longer render\r\n        this._maskContainer.children.forEach((shadow) => {\r\n            if (shadow instanceof Shadow) {\r\n                delete shadow.renderStep;\r\n            }\r\n        });\r\n\r\n        // Remove all the shadows from the container\r\n        this._maskContainer.children.length = 0;\r\n    }\r\n\r\n    //  Apply the filter to a container\r\n    apply(filterManager: FilterSystem, input: RenderTexture, output: RenderTexture, clearMode?: CLEAR_MODES) {\r\n        // Filter almost directly taken from the pixi mask filter\r\n        const maskSprite = this._maskResultSprite;\r\n        const tex = this._maskResultSprite.texture;\r\n\r\n        if (!tex.valid) {\r\n            return;\r\n        }\r\n\r\n        // TODO: uvMatrix ?\r\n        // if (!tex.transform) {\r\n        //   tex.transform = new TextureMatrix(tex, 0.0);\r\n        // }\r\n\r\n        this.uniforms.mask = tex;\r\n        this.uniforms.otherMatrix = filterManager.calculateSpriteMatrix(this._maskMatrix, maskSprite);\r\n\r\n        filterManager.applyFilter(this, input, output, clearMode);\r\n    }\r\n\r\n    // Attribute getters + setters\r\n    /**\r\n     * @type {number} The brightness that unlit areas of the world should have\r\n     */\r\n    set ambientLight(frac: number) {\r\n        this.uniforms.ambientLight = frac;\r\n    }\r\n    get ambientLight() {\r\n        return this.uniforms.ambientLight as number;\r\n    }\r\n    /**\r\n     * @type {number} The width of your application\r\n     */\r\n    set width(width) {\r\n        this._width = width;\r\n\r\n        this.uniforms.size = [this._width, this._height];\r\n        this.__createOverlaySources();\r\n        this.__createCasterSources();\r\n        this.__createMaskSources();\r\n    }\r\n    get width() {\r\n        return this._width;\r\n    }\r\n    /**\r\n     * @type {number} The height of your application\r\n     */\r\n    set height(height) {\r\n        this._height = height;\r\n\r\n        this.uniforms.size = [this._width, this._height];\r\n        this.__createOverlaySources();\r\n        this.__createCasterSources();\r\n        this.__createMaskSources();\r\n    }\r\n    get height() {\r\n        return this._height;\r\n    }\r\n    /**\r\n     * @type {boolean} Whether or not to use shadow casters as shadow overlays as well\r\n     */\r\n    set useShadowCasterAsOverlay(val) {\r\n        this._useShadowCastersAsOverlay = val;\r\n    }\r\n\r\n    get useShadowCasterAsOverlay() {\r\n        return this._useShadowCastersAsOverlay;\r\n    }\r\n}\r\n","import '@pixi/ticker';\r\n\r\nimport { Application } from '@pixi/app';\r\nimport { ShadowFilter } from '../filters/ShadowFilter';\r\nimport { Stage } from '@pixi/layers';\r\n\r\nexport function augmentApplication(application: Application, shadowFilter: ShadowFilter) {\r\n    // Replace the stage with a layered stage\r\n    application.stage = new Stage();\r\n\r\n    // Remove the current render function\r\n    // eslint-disable-next-line @typescript-eslint/unbound-method\r\n    application.ticker.remove(application.render, application);\r\n\r\n    // Overwrite the render function\r\n    application.render = function render(this: Application) {\r\n        // Update stage transforms\r\n        const cacheParent = this.stage.parent;\r\n        // this.stage.parent = this.renderer._tempDisplayObjectParent;\r\n        // this.stage.parent = this.stage._tempDisplayObjectParent;\r\n\r\n        this.stage.parent = this.stage;\r\n        this.stage.updateTransform();\r\n        this.stage.parent = cacheParent;\r\n\r\n        // Update the shadow filter\r\n        shadowFilter.update(this.renderer);\r\n\r\n        // Render the stage without updating the transforms again\r\n        this.renderer.render(this.stage, { skipUpdateTransform: true });\r\n    };\r\n\r\n    // Reassign ticker because its setter initialises the render method\r\n    // eslint-disable-next-line no-self-assign\r\n    application.ticker = application.ticker;\r\n}\r\n","import '@pixi/ticker';\r\n\r\nimport { Container } from '@pixi/display';\r\nimport { Group } from '@pixi/layers';\r\nimport { Shadow } from '../Shadow';\r\nimport { ShadowFilter } from '../filters/ShadowFilter';\r\n\r\nexport function augmentContainer(shadowCasterGroup: Group, shadowOverlayGroup: Group, shadowFilter: ShadowFilter) {\r\n    // eslint-disable-next-line @typescript-eslint/unbound-method\r\n    const orTransform: Container['updateTransform'] = Container.prototype.updateTransform;\r\n    const ticks = new WeakMap<Container, number>();\r\n\r\n    Container.prototype.updateTransform = function updateTransform(this: Container, ...args) {\r\n        if (this.parentGroup === shadowCasterGroup) {\r\n            if (ticks.get(this) !== shadowFilter.tick) shadowFilter._shadowCasterContainer.children.push(this);\r\n            ticks.set(this, shadowFilter.tick);\r\n        }\r\n\r\n        if (this.parentGroup === shadowOverlayGroup) {\r\n            if (ticks.get(this) !== shadowFilter.tick) shadowFilter._shadowOverlayContainer.children.push(this);\r\n            ticks.set(this, shadowFilter.tick);\r\n        }\r\n\r\n        if (this instanceof Shadow) {\r\n            if (ticks.get(this) !== shadowFilter.tick) shadowFilter._maskContainer.children.push(this);\r\n            ticks.set(this, shadowFilter.tick);\r\n        }\r\n\r\n        return orTransform.apply(this, args) as ReturnType<Container['updateTransform']>;\r\n    };\r\n}\r\n","import { Application, IApplicationOptions, IApplicationPlugin } from '@pixi/app';\r\nimport { Group, Layer } from '@pixi/layers';\r\n\r\nimport { Container } from '@pixi/display';\r\nimport { ShadowFilter } from './filters/ShadowFilter';\r\nimport { Sprite } from '@pixi/sprite';\r\nimport { augmentApplication } from './mixins/Application';\r\nimport { augmentContainer } from './mixins/Container';\r\n\r\nexport { filterFuncs } from './filters/FilterFuncs';\r\nexport { ShadowFilter } from './filters/ShadowFilter';\r\nexport { ShadowMaskFilter } from './filters/ShadowMaskFilter';\r\nexport { augmentApplication } from './mixins/Application';\r\nexport { augmentContainer } from './mixins/Container';\r\nexport { Shadow } from './Shadow';\r\n\r\nexport interface ShadowsOptions {\r\n    pixiLights?: {\r\n        diffuseGroup: Group;\r\n        normalGroup: Group;\r\n        lightGroup: Group;\r\n    };\r\n}\r\nexport class Shadows {\r\n    // The objects that will cast shadows\r\n    casterGroup = new Group();\r\n    // The objects that will remain ontop of the shadows\r\n    overlayGroup = new Group();\r\n    filter: ShadowFilter;\r\n    container = new Container();\r\n    constructor(app: Application, options?: ShadowsOptions) {\r\n        // // Create the shadow filter\r\n        this.filter = new ShadowFilter(app.renderer.width, app.renderer.height);\r\n        // Set up the container mixin so that it tells the filter about the available shadows and objects\r\n        augmentContainer(this.casterGroup, this.overlayGroup, this.filter);\r\n        // Overwrite the application render method\r\n        augmentApplication(app, this.filter);\r\n        app.stage.addChild(this.container);\r\n\r\n        if (options?.pixiLights) {\r\n            // Set up pixi-light's layers\r\n            const diffuseLayer = new Layer(options.pixiLights.diffuseGroup);\r\n            const normalLayer = new Layer(options.pixiLights.normalGroup);\r\n            const lightLayer = new Layer(options.pixiLights.lightGroup);\r\n            const diffuseBlackSprite = new Sprite(diffuseLayer.getRenderTexture());\r\n\r\n            diffuseBlackSprite.tint = 0;\r\n            // Set up the lighting layers\r\n            app.stage.addChild(diffuseLayer, diffuseBlackSprite, normalLayer, lightLayer);\r\n            // Add the shadow filter to the diffuse layer\r\n            app.stage.filters = [this.filter];\r\n        } else {\r\n            this.container.filters = [this.filter];\r\n        }\r\n    }\r\n}\r\ndeclare module '@pixi/app' {\r\n    export interface Application {\r\n        shadows: Shadows;\r\n    }\r\n    export interface IApplicationOptions {\r\n        fov?: ShadowsOptions;\r\n    }\r\n}\r\n\r\nexport const AppLoaderPlugin: IApplicationPlugin = {\r\n    init(this: Application, options: IApplicationOptions): void {\r\n        this.shadows = new Shadows(this, options.fov);\r\n    },\r\n    destroy(this: Application): void {\r\n        delete this.shadows;\r\n    },\r\n};\r\n"],"names":["Filter","Matrix","Sprite","RenderTexture","SCALE_MODES","BLEND_MODES","Container","Stage","Group","Layer"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA,MAAA,WAAA,YAAA,CAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA,MAAA,kBAAA,GAAA,QAAA,CAAA;AACA;AACA,MAAA,eAAA,SAAAA,WAAA,CAAA;AACA,IAAA,MAAA,GAAA,CAAA,IAAA,CAAA,OAAA,GAAA,MAAA,CAAA;AACA,IAAA,OAAA,GAAA,CAAA,IAAA,CAAA,OAAA,GAAA,EAAA,CAAA;AACA,IAAA,OAAA,GAAA,CAAA,IAAA,CAAA,wBAAA,GAAA,IAAAC,WAAA,GAAA,CAAA;AACA;AACA,IAAA,WAAA,EAAA,MAAA,EAAA;AACA,QAAA,KAAA;AACA,sBAAA,CAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAA,CAAA;AACA,sBAAA,CAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAA,EAAA,WAAA,CAAA;AACA;AACA;AACA;AACA;AACA;AACA,qCAAA,EAAA,kBAAA,CAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2CAAA,EAAA,kBAAA,CAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAA,CAAA;AACA,SAAA,CAAA,IAAA,CAAA,MAAA,GAAA,MAAA,CAAA,eAAA,CAAA,SAAA,CAAA,MAAA,CAAA,IAAA,CAAA,IAAA,CAAA,CAAA,eAAA,CAAA,SAAA,CAAA,OAAA,CAAA,IAAA,CAAA,IAAA,CAAA,CAAA,eAAA,CAAA,SAAA,C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"}